name: Sprint Release Notes

on:
  workflow_dispatch:
    inputs:
      sprint_name:
        description: 'Sprint name (e.g., Sprint5)'
        required: true
      version:
        description: 'Release version (e.g., v1.2.0)'
        required: true

jobs:
  create-release-notes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install requests jira

      - name: Generate release notes
        env:
          JIRA_URL: ${{ secrets.JIRA_URL }}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        run: |
          python generate_release_notes.py "${{ github.event.inputs.sprint_name }}"

      - name: Checkout main branch
        run: |
          git checkout main
          git pull origin main

      - name: Prepare branch name
        id: prepare_branch
        run: |
          BRANCH_NAME="release/${{ github.event.inputs.version }}"
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_OUTPUT

      - name: Create and checkout new branch from main
        run: |
          git checkout -b ${{ steps.prepare_branch.outputs.BRANCH_NAME }}

      - name: Configure Git author
        run: |
          git config --local user.email "your-email@example.com"
          git config --local user.name "Your Name"

      - name: Commit changes
        run: |
          git add release_notes_*.md
          git commit -m "Add release notes for ${{ github.event.inputs.sprint_name }} - ${{ github.event.inputs.version }}"

      - name: Push new branch
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          git push origin ${{ steps.prepare_branch.outputs.BRANCH_NAME }}

      - name: Verify Release Notes Content
        run: |
          cat release_notes_*.md

  create-releases:
    needs: create-release-notes
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install requests jira

      - name: Get repository names
        id: get_repos
        run: |
          python -c "import json; print(json.dumps([f'repo-{repo}.md' for repo in ['repo1', 'repo2']]))" > repos.json
          echo "repos=$(cat repos.json)" >> $GITHUB_ENV

      - name: Create GitHub Releases in Different Repositories
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          repos=$(cat repos.json)
          for repo in $repos; do
            REPO_NAME=$(basename $repo .md)
            if [ -f "release_notes_$REPO_NAME.md" ]; then
              gh release create ${{ github.event.inputs.version }} --repo $REPO_NAME --title "Release ${{ github.event.inputs.version }} for ${{ github.event.inputs.sprint_name }}" --notes-file release_notes_$REPO_NAME.md
            fi
          done
