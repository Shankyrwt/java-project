name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      sprint_name:
        description: 'Sprint Name'
        required: true
      version:
        description: 'Version Number'
        required: true

jobs:
  create-release-notes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Install dependencies
        run: |
          pip install jira

      - name: Generate Release Notes
        run: |
          python generate_release_notes.py "${{ github.event.inputs.sprint_name }}" "${{ github.event.inputs.version }}"

  create-releases:
    needs: create-release-notes
    runs-on: ubuntu-latest
    steps:
      - name: Read repository names
        id: get_repos
        run: |
          repos=$(grep "Repositories involved:" release_notes.md | cut -d':' -f2 | tr -d ' ')
          echo "repos=$repos" >> $GITHUB_ENV

      - name: Create Releases in Other Repositories
        run: |
          IFS=',' read -r -a repo_array <<< "$repos"
          for repo in "${repo_array[@]}"; do
            echo "Creating release in $repo"
            # Clone the repository
            git clone https://github.com/$repo.git
            cd "$(basename "$repo")" || exit
            
            # Configure Git
            git config --local user.email "${{ github.actor }}@users.noreply.github.com"
            git config --local user.name "${{ github.actor }}"

            # Create a new release branch
            git checkout -b release/v${{ github.event.inputs.version }}
            
            # Copy release notes
            cp ../release_notes.md .

            # Check the contents of the release_notes.md
            echo "Contents of release_notes.md:"
            cat release_notes.md
            
            # Commit if there are changes
            git add release_notes.md
            git commit -m "Release notes for version ${{ github.event.inputs.version }}" || echo "No changes to commit."

            # Push to origin
            git push origin release/v${{ github.event.inputs.version }}

            cd ..
            rm -rf "$(basename "$repo")"  # Clean up

