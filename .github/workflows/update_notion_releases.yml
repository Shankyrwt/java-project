name: Sprint Release Notes and Version Update

on:
  workflow_dispatch:
    inputs:
      sprint_name:
        description: 'Sprint name (e.g., Sprint5)'
        required: true

jobs:
  create-release-notes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install requests jira

      - name: Generate release notes
        env:
          JIRA_URL: ${{ secrets.JIRA_URL }}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        run: |
          python generate_release_notes.py "${{ github.event.inputs.sprint_name }}"

      - name: Prepare unique tag name
        id: prepare_tag
        run: |
          TAG_NAME=$(echo "${{ github.event.inputs.sprint_name }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-zA-Z0-9]/-/g')
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          UNIQUE_TAG_NAME="${TAG_NAME}-${TIMESTAMP}"
          echo "TAG_NAME=${UNIQUE_TAG_NAME}" >> $GITHUB_OUTPUT
          echo "Branch name will be: release/${UNIQUE_TAG_NAME}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.prepare_tag.outputs.TAG_NAME }}
          release_name: Release ${{ github.event.inputs.sprint_name }}
          body_path: release_notes.md
          draft: false
          prerelease: false

  update-version-references:
    needs: create-release-notes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Git user
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Determine next version
        id: determine_version
        run: |
          CURRENT_VERSION=$(grep -oP 'ref=v\d+\.\d+\.\d+' $(find . -type f -name '*.tf') | head -n 1 | grep -oP 'v\d+\.\d+\.\d+')
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Error: Could not find the current version."
            exit 1
          fi
          echo "Current version: $CURRENT_VERSION"

          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."$3+1}')
          echo "Next version: $NEW_VERSION"

          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update version references
        run: |
          echo "Updating references from ${CURRENT_VERSION} to ${NEW_VERSION}"
          grep -rl "ref=${CURRENT_VERSION}" . | xargs sed -i "s/ref=${CURRENT_VERSION}/ref=${NEW_VERSION}/g"

      - name: Commit changes and create new branch
        run: |
          BRANCH_NAME="release/${NEW_VERSION}"
          echo "Creating branch: $BRANCH_NAME"
          git checkout -b "$BRANCH_NAME"
          git commit -am "Updated version references to ${NEW_VERSION}"
          git push origin "$BRANCH_NAME"

  create-pull-request:
    needs: update-version-references
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.MY_GITHUB_TOKEN }}
          commit-message: "Updated version references to ${NEW_VERSION}"
          branch: "release/${NEW_VERSION}"
          base: "certain"
          title: "Release ${NEW_VERSION} - Merging into 'certain'"
          body: |
            This PR includes the following updates:
            - Updated version references to ${NEW_VERSION}
            - Release notes:
            $(cat release_notes.md)
